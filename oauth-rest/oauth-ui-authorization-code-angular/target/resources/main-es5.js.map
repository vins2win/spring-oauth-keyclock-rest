{"version":3,"sources":["webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/app.service.ts","webpack:///src/app/foo.component.ts","webpack:///src/app/home.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","selector","template","AppModule","forRoot","path","component","pathMatch","onSameUrlNavigation","declarations","imports","providers","bootstrap","Foo","name","AppService","_http","clientId","redirectUri","params","URLSearchParams","append","headers","post","toString","subscribe","data","saveToken","err","alert","token","expireDate","Date","getTime","expires_in","set","access_token","id_token","console","log","window","location","href","resourceUrl","get","error","json","check","logoutURL","FooComponent","_service","foo","foosUrl","getResource","getFoo","HomeComponent","isLoggedIn","checkCredentials","i","indexOf","retrieveToken","substring","logout","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {Component} from '@angular/core';\n \n@Component({\n    selector: 'app-root',\n    template: `<nav class=\"navbar navbar-default\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <a class=\"navbar-brand\" href=\"/\">Spring Security Oauth - Authorization Code</a>\n    </div>\n  </div>\n</nav>\n<router-outlet></router-outlet>`\n})\n\nexport class AppComponent {}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule }   from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home.component';\nimport { FooComponent } from './foo.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    FooComponent    \n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    RouterModule.forRoot([\n     { path: '', component: HomeComponent, pathMatch: 'full' }], {onSameUrlNavigation: 'reload'})\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Injectable} from '@angular/core';\nimport { Cookie } from 'ng2-cookies';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\n \nexport class Foo {\n  constructor(\n    public id: number,\n    public name: string) { }\n} \n\n@Injectable()\nexport class AppService {\n   public clientId = 'newClient';\n   public redirectUri = 'http://localhost:8089/';\n\n  constructor(\n    private _http: HttpClient){}\n\n  retrieveToken(code){\n    let params = new URLSearchParams();   \n    params.append('grant_type','authorization_code');\n    params.append('client_id', this.clientId);\n    params.append('client_secret', 'newClientSecret');\n    params.append('redirect_uri', this.redirectUri);\n    params.append('code',code);\n\n    let headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\n     this._http.post('http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token', params.toString(), { headers: headers })\n    .subscribe(\n      data => this.saveToken(data),\n      err => alert('Invalid Credentials')\n    ); \n  }\n\n  saveToken(token){\n    var expireDate = new Date().getTime() + (1000 * token.expires_in);\n    Cookie.set(\"access_token\", token.access_token, expireDate);\n    Cookie.set(\"id_token\", token.id_token, expireDate);\n    console.log('Obtained Access token');\n    window.location.href = 'http://localhost:8089';\n  }\n\n  getResource(resourceUrl) : Observable<any>{\n    var headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8', 'Authorization': 'Bearer '+Cookie.get('access_token')});\n    return this._http.get(resourceUrl, { headers: headers })\n                   .catch((error:any) => Observable.throw(error.json().error || 'Server error'));\n  }\n\n  checkCredentials(){\n    return Cookie.check('access_token');\n  } \n\n  logout() {\n    let token = Cookie.get('id_token');\n    Cookie.delete('access_token');\n    Cookie.delete('id_token');\n    let logoutURL = \"http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/logout?id_token_hint=\"\n      + token\n      + \"&post_logout_redirect_uri=\" + this.redirectUri;\n\n    window.location.href = logoutURL;\n  } \n}","import { Component } from '@angular/core';\nimport {AppService, Foo} from './app.service'\n\n@Component({\n  selector: 'foo-details',\n  providers: [AppService],  \n  template: `<div class=\"container\">\n    <h1 class=\"col-sm-12\">Foo Details</h1>\n    <div class=\"col-sm-12\">\n        <label class=\"col-sm-3\">ID</label> <span>{{foo.id}}</span>\n    </div>\n    <div class=\"col-sm-12\">\n        <label class=\"col-sm-3\">Name</label> <span>{{foo.name}}</span>\n    </div>\n    <div class=\"col-sm-12\">\n        <button class=\"btn btn-primary\" (click)=\"getFoo()\" type=\"submit\">New Foo</button>        \n    </div>\n</div>`\n})\n\nexport class FooComponent {\n    public foo = new Foo(1,'sample foo');\n    private foosUrl = 'http://localhost:8081/resource-server/api/foos/';  \n\n    constructor(private _service:AppService) {}\n\n    getFoo(){\n        this._service.getResource(this.foosUrl+this.foo.id)\n         .subscribe(\n                     data => this.foo = data,\n                     error =>  this.foo.name = 'Error');\n    }\n}\n","import {Component} from '@angular/core';\nimport {AppService} from './app.service'\n \n@Component({\n    selector: 'home-header',\n    providers: [AppService],\n  template: `<div class=\"container\" >\n    <button *ngIf=\"!isLoggedIn\" class=\"btn btn-primary\" (click)=\"login()\" type=\"submit\">Login</button>\n    <div *ngIf=\"isLoggedIn\" class=\"content\">\n        <span>Welcome !!</span>\n        <a class=\"btn btn-default pull-right\"(click)=\"logout()\" href=\"#\">Logout</a>\n        <br/>\n        <foo-details></foo-details>\n    </div>\n</div>`\n})\n \nexport class HomeComponent {\n     public isLoggedIn = false;\n\n    constructor(\n        private _service:AppService){}\n \n    ngOnInit(){\n        this.isLoggedIn = this._service.checkCredentials();    \n        let i = window.location.href.indexOf('code');\n        if(!this.isLoggedIn && i != -1){\n            this._service.retrieveToken(window.location.href.substring(i + 5));\n        }\n    }\n\n    login() {\n        window.location.href = 'http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/auth?response_type=code&&scope=openid%20write%20read&client_id=' + \n          this._service.clientId + '&redirect_uri='+ this._service.redirectUri;\n    }\n \n    logout() {\n        this._service.logout();\n    }\n}","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"]}